@using DayPilot.Web.Mvc;
@using DayPilot.Web.Mvc.Enums
@using DayPilot.Web.Mvc.Events.Scheduler;
@using DayPilot.Web.Mvc.Enums.Scheduler;
@model MedOffice.Models.ApplicationUser

@{
    ViewBag.Title = "Karta pracownika";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .row1 {
        text-align: center
    }
    .row2 {
        text-align: center;
        height: 42px;
    }
    .row3 {
        text-align: center;
        height: 20px;
    }
    .row4 {
        text-align: center;
        height: 10px;
    }
</style>

<div>
    <div class="col-md-offset-0-5 col-md-4regt">
        <h2>@ViewBag.Title.</h2>
    </div>
    <br style="clear: both;">
    <div class="col-md-offset-0-5 col-md-4regst">
        <h4>Szczegółowe informacje o pracowniku.</h4>
    </div>
    <br style="clear: both;">
    <hr />

    <div class="row2"><h2><b>@Html.DisplayFor(model => model.Name) @Html.DisplayFor(model => model.Surname)</b>, @ViewBag.RoleName</h2></div>

    @Html.DayPilotMenu("menu", new DayPilotMenuConfig
    {
        CssClassPrefix = "menu_default",
        Items = new DayPilot.Web.Mvc.MenuItemCollection
{
new DayPilot.Web.Mvc.MenuItem { Text = "Usuń", Action = MenuItemAction.CallBack, Command = "Delete"}
}
    })

    @Html.DayPilotScheduler("dps", new DayPilotSchedulerConfig
{

    BackendUrl = Url.Content("~/Scheduler/Backend"),
    EventResizeHandling = EventResizeHandlingType.CallBack,
    EventMoveHandling = EventMoveHandlingType.CallBack,
    CellGroupBy = GroupBy.Day,
    CellDuration = 1440,
    Days = 31,
    Scale = TimeScale.Hour,
    StartDate = new DateTime(DateTime.Today.Year, DateTime.Today.Month, DateTime.Today.Day),
    BeforeRowHeaderRenderJavaScript = "row(args);", // LOL
    CellWidth = 40,
    EventHeight = 25,

    HeaderColumns = new RowHeaderColumnCollection {
new RowHeaderColumn("<center>Pesel</center>", 100),
new RowHeaderColumn("<center>Personalia</center>", 100),
//new RowHeaderColumn("<center><a href='javascript:dps.commandCallBack(\"sort\", { field: \"fsname\" });'>Personalia</a></center>", 100)
},
    TimeHeaders = new TimeHeaderCollection {
//new TimeHeader(GroupBy.Month, "MMMM yyyy"),
//new TimeHeader(GroupBy.Week),
new TimeHeader(GroupBy.Day),
new TimeHeader(GroupBy.Hour)
},

    ShowNonBusiness = false,
    BusinessBeginsHour = 6,
    BusinessEndsHour = 20,

    EventClickHandling = EventClickHandlingType.JavaScript,
    EventClickJavaScript = "ask(e);",
    TimeRangeSelectedHandling = TimeRangeSelectedHandlingType.JavaScript,
    TimeRangeSelectedJavaScript = "create(start, end, resource)",
    ContextMenu = "menu",
})

    <div class="row4"></div>

    @if (Model.Specialization != null)
    {
        <div class="row3">
            <b>Specjalizacja:</b> @Html.DisplayFor(model => model.Specialization)
        </div>
    }

    <div class="row3">
        <b>Email:</b> @Html.DisplayFor(model => model.Email)
    </div>

    <div class="row3">
        <b>Uzyskanie kwalifikacji:</b> @Html.DisplayFor(model => model.Experience, "{0:dd/MM/yyyy}")
    </div>

    <div class="row3">
        <b>Uzyskanie zatrudnienia:</b> @Html.DisplayFor(model => model.Seniority)
    </div>
</div>

<div class="col-md-offset-0-5">
    <p>
        @Html.ActionLink("Edytuj", "Edit", "Search", new { id = Model.Id }, null) |
        @Html.ActionLink("Usuń", "Delete", "Account", new { id = Model.Id }, null) |
        @Html.ActionLink("Powrót do listy", "WorkerSearch", "Search")
    </p>
</div>


<script type="text/javascript">
    function row(args) {
        args.row.cssClass = "row1";
    };
</script>

<script type="text/javascript">
function create(start, end, resource) {
	var m = new DayPilot.Modal();
	m.closed = function() {
        if (this.result == "OK") {
            dps.commandCallBack('refresh');
        }
        else { dps.commandCallBack('refresh'); }
        dps.clearSelection();
	};
	m.showUrl('/Event/Create?start=' + start + '&end=' + end + '&resource=' + resource);
}


/* Recurrence dialogs */

function ask(e) {

    // it's a normal event
    if (!e.recurrent()) {
        edit(e);
        return;
    }

    // it's a recurrent event but it's an exception from the series
    if (e.value() !== null) {
        edit(e);
        return;
    }

    var modal = new DayPilot.Modal();
    modal.width = 300;
    modal.height = 150;
    modal.closed = function () {
        if (this.result != "cancel") {
            edit(e, this.result);
        }
    };

    modal.showUrl('@Url.Action("RecurrentEditMode", "Event")');
}

function edit(e, mode) {
    var modal = new DayPilot.Modal();
    modal.closed = function () {
        if (this.result === "OK") {
            dps.commandCallBack('refresh');
        }
    };

    var url = "@Url.Action("Edit", "Event")";
    if (e.id() !== null) {
        url += "/" + e.id();
    }
    url += "?";
    if (e.recurrentMasterId()) {
        url += "master=" + e.recurrentMasterId() + "&";
    }
    if (mode == "this") {
        url += "start=" + e.start().toStringSortable();
    }
    modal.showUrl(url);
}
</script>

